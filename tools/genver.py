#!/usr/bin/env python
import datetime
import os
import sys

ow = sys.stdout.write
ew = sys.stderr.write

def strnow():
    tnow = datetime.datetime.now()
    ret = tnow.strftime("%Y/%m/%d %H:%M:%S")
    return ret

def usage():
    ew(f"Usage: {sys.argv[0]} <README.md> <version_cpp>\n")

def get_version(readme_filename: str) -> str:
    version = "???"
    readme = open(readme_filename)
    for line in readme.readlines():
        if line.startswith("The current version is"):
            version = line.split()[-1]
    return version
    
def generate_version_cpp(readme_filename: str, cpp_filename: str) :
    version = get_version(readme_filename)
    cpp = open(cpp_filename, "w")
    script_name = os.path.basename(sys.argv[0])
    cpp.write(f"// auto generated by {script_name} on {strnow()}\n")
    cpp.write('#include "version.h"\n')
    cpp.write(f'const std::string version = "{version}";\n')

if __name__ == "__main__":
    rc = 0
    if len(sys.argv) != 1+2:
        usage()
        rc = 1
    else:
        generate_version_cpp(sys.argv[1], sys.argv[2])
    sys.exit(rc)
